#!/usr/bin/env python3

import sys
import os
import json
import argparse
import pandas as pd

exit_status = os.EX_OK
p = None

configs = {
    "header":{
        "passwd":["Username", "Password", "uid", "GID", "full_name", "Home directory", "Command"],
        "group":[ "Group", "Password", "GID", "groups"]
    },
    "output_fields":{
        "header":["uid", "full_name"]
    },
    "default_passwd_path": "/etc/passwd",
    "default_group_path": "/etc/group"
}


def _parse_file(file_type: str = 'passwd') -> pd.DataFrame:
    """
    Method for parsing information in the passwd or group file.
    :param file_type: string defining the file type that is being parsed. Either 'passwd' or 'group'. Default 'passwd'.
    :type file_type: str
    :return: A pandas DataFrame of the data parsed from the file.
    """
    global exit_status, p, configs

    assert((file_type is 'passwd') or (file_type is 'group'))

    if file_type is 'passwd':
        header = configs['header']['passwd']
        file = p.passwd_file
    else:
        header = configs['header']['group']
        file = p.group_file

    try:
        file_df = pd.read_table(file, sep=':', comment='#', index_col=0, names=header)

        # simple check to ensure file is formatted correctly
        if file_type is 'passwd':
            assert(not file_df[header[2]].isnull().any())
        else:
            assert(not file_df[header[2]].isnull().any())

    except FileNotFoundError as err:
        print(err)
        exit_status = os.EX_DATAERR
        sys.exit(exit_status)

    except (AssertionError, IndexError):
        if file_type is 'passwd':
            print("The passwd file {} may not be formatted according to Unix standards.".format(p.passwd_file))
        else:
            print("The group file {} may not be formatted according to Unix standards.".format(p.group_file))
        exit_status = os.EX_DATAERR
        sys.exit(exit_status)

    return file_df


def _build_password_df(passwd_df: pd.DataFrame, group_df: pd.DataFrame) -> pd.DataFrame:
    """
    Function for building desired password dataframe from the data stored in the passwd and group file.
    :param passwd_df: The data stored in the passwd file
    :type passwd_df: pd.DataFrame
    :param group_df: The data stored in the group file
    :type group_df: pd.DataFrame
    :return: The DataFrame containing the group list along with the desired fields for each user.
    """
    username_groups_df = passwd_df.loc[:, configs['output_fields']['header']]
    username_groups_df.loc[:, 'groups'] = ''

    # drop groups without users in the 'groups' field from Series
    groups_series = group_df['groups'].str.split(',').dropna()

    # keep track of users that are in 'groups'
    users_in_groups = set()

    try:
        # iterate through non-empty group lists and append group to each user 'Group List' field
        for group in groups_series.index:
            user = groups_series[group]
            username_groups_df.loc[user, 'groups'] += ", {}".format(group)
            users_in_groups.update(user)
    except KeyError as err:
        print("The user {} listed in on of the groups does not exist in the specified passwd file.".format(user))
        print("Please ensure the groups file and the passwd file are formatted correctly and are for the same system.")
        exit_status = os.EX_DATAERR
        sys.exit(exit_status)

    # remove leading ', ' in 'Group List' column
    username_groups_df.loc[list(users_in_groups), 'groups'] = (
        username_groups_df.loc[list(users_in_groups), 'groups'].str.replace('^, ', '')
    )

    # split strings on ',' in 'Group List' column
    username_groups_df.loc[list(users_in_groups), 'groups'] = (
        username_groups_df.loc[list(users_in_groups), 'groups'].str.split(',')
    )

    return username_groups_df


def main() -> None:
    """
    Driver of password parser program.
    :return: None
    """
    global exit_status, p

    if not p.passwd_file:
        p.passwd_file = configs["default_passwd_path"]

    if not p.group_file:
        p.group_file = configs["default_group_path"]

    passwd_df = _parse_file(file_type='passwd')
    group_df = _parse_file(file_type='group')

    username_groups_df = _build_password_df(passwd_df, group_df)

    print(json.dumps(username_groups_df.to_dict(orient='index'), indent=True))


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-p", "--passwd_file", type=str,
                        help="Password file path. Leave blank to default to '/etc/passwd'")
    parser.add_argument("-g", "--group_file", type=str,
                        help="Group file path, Leave blank to default to '/etc/group'")
    p = parser.parse_args()

    main()
    sys.exit(exit_status)